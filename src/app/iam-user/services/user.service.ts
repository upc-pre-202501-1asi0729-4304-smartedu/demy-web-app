import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { UserAccount } from '../model/user.entity';
import { environment } from '../../../environments/environment'; // Importar el entorno

/**
 * Service responsible for handling operations related to user accounts.
 * This includes creating, retrieving, and deleting users by communicating
 * with the backend API.
 *
 * @remarks
 * The service is provided at the root level, making it available throughout the app.
 */

@Injectable({
  providedIn: 'root'
})
export class UserService {
  private apiUrl = `${environment.apiBaseUrl}${environment.usersEndpointPath}`; // Usar las variables de entorno

  /**
   * Injects Angular's HttpClient to perform HTTP requests.
   *
   * @param http - Angular HttpClient for making API calls
   */

  constructor(private http: HttpClient) {}

  /**
   * Registers a new user account in the backend.
   *
   * @param user - User data excluding the `id` property, which is typically auto-generated by the backend
   * @returns An Observable that emits the created UserAccount object
   */
  registerUser(user: Omit<UserAccount, 'id'>): Observable<UserAccount> {
    return this.http.post<UserAccount>(this.apiUrl, user);
  }

  /**
   * Retrieves user accounts by their email address.
   *
   * @param email - Email address to search for
   * @returns An Observable that emits an array of UserAccount objects matching the email
   */
  getUserByEmail(email: string): Observable<UserAccount[]> {
    return this.http.get<UserAccount[]>(`${this.apiUrl}?email=${email}`);
  }

  updatePasswordById(id: number, newPassword: string): Observable<UserAccount> {
    return this.http.put<UserAccount>(`${this.apiUrl}/${id}`, { passwordHash: newPassword });
  }



  /**
   * Deletes a user account from the backend using their ID.
   *
   * @param userId - The ID of the user to be deleted
   * @returns An Observable that completes when the deletion is successful
   */
  deleteUser(userId: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${userId}`);
  }

  getUserRole(): string | null {
    const userData = localStorage.getItem('userData');
    if (!userData) return null;
    try {
      return JSON.parse(userData).role ?? null;
    } catch {
      return null;
    }
  }

  isAdmin(): boolean {
    return this.getUserRole() === 'ADMIN';
  }

  isTeacher(): boolean {
    return this.getUserRole() === 'TEACHER';
  }

  clearUserData(): void {
    localStorage.removeItem('userData');
    localStorage.removeItem('teacherId');
  }


  /**
   * Sends a request to reset a user's password using their email.
   *
   * @param email - The user's email address
   * @param newPassword - The new password to set
   * @returns An Observable that completes when the password is reset
   */
  resetPassword(email: string, newPassword: string): Observable<void> {
    const body = { email, newPassword };
    return this.http.put<void>(`${environment.apiBaseUrl}/users/reset-password`, body);
  }

}
